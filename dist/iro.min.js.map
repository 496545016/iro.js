{"version":3,"file":"iro.min.js","sources":["../src/components/handle.js","../src/util/dom.js","../src/components/base.js","../src/components/wheel.js","../src/color.js","../src/components/slider.js","../src/util/svg.js","../src/stylesheet.js","../src/colorPicker.js","../src/index.js"],"sourcesContent":["// css class prefix for this element\nvar CLASS_PREFIX = \"iro__handle\";\n\n\nexport default class handle {\n  /**\n    * @constructor ui handle\n    * @param {svgRoot} svg - svgRoot object\n    * @param {Object} props - options\n  */\n  constructor(svg, props) {\n    var baseGroup = svg.g({\n      class: CLASS_PREFIX\n    });\n    baseGroup.circle(0, 0, props.r, {\n      class: CLASS_PREFIX + \"__outer\",\n      fill: \"none\",\n      strokeWidth: 5,\n      stroke: \"#000\",\n    });\n    baseGroup.circle(0, 0, props.r, {\n      class: CLASS_PREFIX + \"__inner\",\n      fill: \"none\",\n      strokeWidth: 2,\n      stroke: \"#fff\",\n    });\n    this.g = baseGroup;\n  }\n\n  /**\n    * @desc move handle to centerpoint (x, y) and redraw\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n  */\n  move(x, y) {\n    this.g.setTransform(\"translate\", [x, y]);\n  }\n}","const EVENT_READYSTATE_CHANGE = \"readystatechange\",\nREADYSTATE_COMPLETE = \"complete\";\n\n/**\n  * @desc listen to one or more events on an element\n  * @param {Element} el target element\n  * @param {Array} eventList the events to listen to\n  * @param {Function} callback the event callback function\n  * @param {Object} params params to pass to addEventListener\n*/\nexport function listen(el, eventList, callback, params={}) {\n  for (var i = 0; i < eventList.length; i++) {\n    el.addEventListener(eventList[i], callback, params);\n  }\n};\n\n/**\n* @desc remove an event listener on an element\n* @param {Element} el target element\n* @param {Array} eventList the events to remove\n* @param {Function} callback the event callback function\n*/\nexport function unlisten(el, eventList, callback) {\n  for (var i = 0; i < eventList.length; i++) {\n    el.removeEventListener(eventList[i], callback);\n  }\n};\n\n/**\n* @desc call fn callback when the page document is ready\n* @param {Function} callback callback function to be called\n*/\nexport function whenReady(callback) {\n  var _this = this;\n  if (document.readyState == READYSTATE_COMPLETE) {\n    callback();\n  }\n  else {\n    listen(document, [EVENT_READYSTATE_CHANGE], function stateChange(e) {\n      if (document.readyState == READYSTATE_COMPLETE) {\n        callback();\n        unlisten(document, [EVENT_READYSTATE_CHANGE], stateChange);\n      }\n    });\n  }\n};","import {listen, unlisten} from \"util/dom\";\n\nconst EVENT_MOUSEDOWN = \"mousedown\",\n      EVENT_MOUSEMOVE = \"mousemove\",\n      EVENT_MOUSEUP = \"mouseup\",\n      EVENT_TOUCHSTART = \"touchstart\",\n      EVENT_TOUCHMOVE = \"touchmove\",\n      EVENT_TOUCHEND = \"touchend\";\n\nexport default class baseComponent {\n\n  constructor(parent, className) {\n    var g = parent.svg.g({\n      class: className\n    });\n    var el = g.el;\n    listen(el, [EVENT_MOUSEDOWN, EVENT_TOUCHSTART], this, { passive:false });\n    this.g = g;\n    this.el = el;\n    this.parent = parent;\n  }\n\n  handleEvent(e) {\n    // Detect if the event is a touch event by checking if it has the `touches` property\n    // If it is a touch event, use the first touch input\n    e.preventDefault();\n    var point = e.touches ? e.changedTouches[0] : e,\n        // Get the screen position of the UI\n        rect = this.el.getBoundingClientRect(),\n        // Convert the screen-space pointer position to local-space\n        x = point.clientX - rect.left,\n        y = point.clientY - rect.top;\n        \n    var hsv;  \n    var color = this.parent.color; \n    switch (e.type) {\n      case EVENT_MOUSEDOWN:\n      case EVENT_TOUCHSTART:\n        // Attach event listeners\n        listen(document, [EVENT_MOUSEMOVE, EVENT_TOUCHMOVE, EVENT_MOUSEUP, EVENT_TOUCHEND], this, { passive:false });\n        hsv = this.input(x, y, \"START\");\n        this.parent.emit(\"input:start\", color);\n        break;\n      case EVENT_MOUSEMOVE:\n      case EVENT_TOUCHMOVE:\n        // Use the position to update the picker color\n        hsv = this.input(x, y, \"MOVE\");\n        break;\n      case EVENT_MOUSEUP:\n      case EVENT_TOUCHEND:\n        hsv = this.input(x, y, \"END\");\n        this.parent.emit(\"input:end\", color);\n        unlisten(document, [EVENT_MOUSEMOVE, EVENT_TOUCHMOVE, EVENT_MOUSEUP, EVENT_TOUCHEND], this);\n        break;\n    }\n    if (hsv) color.hsv = hsv;\n  }\n\n}","import handle from \"./handle\";\nimport base from \"./base\";\n\n// css class prefix for this element\nvar CLASS_PREFIX = \"iro__wheel\";\n// Quick references to reused math functions\nvar PI = Math.PI,\n    sqrt = Math.sqrt,\n    abs = Math.abs,\n    round = Math.round;\n\nexport default class wheel extends base {\n  /**\n    * @constructor hue wheel UI\n    * @param {svgRoot} svg - svgRoot object\n    * @param {Object} opts - options\n  */\n  constructor(parent, opts) {\n    super(parent, CLASS_PREFIX);\n    this._opts = opts;\n    this.type = \"wheel\";\n  \n    var cY = opts.cY,\n        cX = opts.cX,\n        r = opts.r,\n        border = opts.border;\n  \n    var svg = parent.svg;\n    var baseGroup = this.g;\n  \n    baseGroup.circle(cX, cY, r + border.w / 2, {\n      class: CLASS_PREFIX + \"__border\",\n      fill: \"#fff\",\n      stroke: border.color,\n      strokeWidth: border.w,\n    });\n  \n    var ringGroup = baseGroup.g({\n      class: CLASS_PREFIX + \"__hue\",\n      strokeWidth: r,\n      fill: \"none\",\n    });\n  \n    for (var hue = 0; hue < 360; hue++) {\n      ringGroup.arc(cX, cY, r / 2, hue, hue + 1.5, {\n        stroke: \"hsl(\" + (opts.anticlockwise ? 360 - hue : hue) + \",100%,50%)\",\n      });\n    }\n  \n    var saturation = baseGroup.circle(cX, cY, r, {\n      class: CLASS_PREFIX + \"__saturation\"\n    });\n  \n    saturation.setGradient(\"fill\", svg.gradient(\"radial\", {\n      0: {\n        color: \"#fff\"\n      },\n      100: {\n        color:\"#fff\", \n        opacity: 0\n      },\n    }));\n  \n    this._lightness = baseGroup.circle(cX, cY, r, {\n      class: CLASS_PREFIX + \"__lightness\",\n      opacity: 0\n    });\n  \n    this.handle = new handle(baseGroup, opts.marker);\n  }\n\n  /**\n    * @desc updates this element to represent a new color value\n    * @param {Object} color - an iroColor object with the new color value\n    * @param {Object} changes - an object that gives a boolean for each HSV channel, indicating whether ot not that channel has changed\n  */\n  update(color, changes) {\n    var opts = this._opts;\n    var hsv = color.hsv;\n    // If the V channel has changed, redraw the wheel UI with the new value\n    if (changes.v && opts.lightness) {\n      this._lightness.setAttrs({opacity: (1 - hsv.v / 100).toFixed(2) });\n    }\n    // If the H or S channel has changed, move the marker to the right position\n    if (changes.h || changes.s) {\n      // convert the hue value to radians, since we'll use it as an angle\n      var hueAngle = (opts.anticlockwise ? 360 - hsv.h : hsv.h) * (PI / 180);\n      // convert the saturation value to a distance between the center of the ring and the edge\n      var dist = (hsv.s / 100) * opts.rMax;\n      // Move the marker based on the angle and distance\n      this.handle.move(opts.cX + dist * Math.cos(hueAngle), opts.cY + dist * Math.sin(hueAngle));\n    }\n  }\n\n  /**\n    * @desc Takes a point at (x, y) and returns HSV values based on this input -- use this to update a color from mouse input\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n    * @return {Object} - new HSV color values (some channels may be missing)\n  */\n  input(x, y) {\n    var opts = this._opts,\n        rangeMax = opts.rMax;\n\n    x = opts.r - x;\n    y = opts.r - y;\n\n    var angle = Math.atan2(y, x),\n        // Calculate the hue by converting the angle to radians\n        hue = round(angle * (180 / PI)) + 180,\n        // Find the point's distance from the center of the wheel\n        // This is used to show the saturation level\n        dist = Math.min(sqrt(x * x + y * y), rangeMax);\n    \n    hue = (opts.anticlockwise ? 360 - hue : hue);\n\n    // Return just the H and S channels, the wheel element doesn't do anything with the L channel\n    return {\n      h: hue,\n      s: round((100 / rangeMax) * dist)\n    };\n  }\n}","var round = Math.round;\nvar floor = Math.floor;\n\n/**\n  * @desc generic parser for hsl / rgb / etc string\n  * @param {String} str - color string\n  * @param {Array} maxValues - max values for each channel (used for calculating percent-based values)\n  * @return {Array} type (rgb | rgba | hsl | hsla) values for each channel\n*/\nfunction parseColorStr(str, maxValues) {\n  var parsed = str.match(/(\\S+)\\((\\d+)(%?)(?:\\D+?)(\\d+)(%?)(?:\\D+?)(\\d+)(%?)(?:\\D+?)?([0-9\\.]+?)?\\)/i),\n      val1 = parseInt(parsed[2]),\n      val2 = parseInt(parsed[4]),\n      val3 = parseInt(parsed[6]);\n  return [\n    parsed[1],\n    parsed[3] == \"%\" ? val1 / 100 * maxValues[0] : val1,\n    parsed[5] == \"%\" ? val2 / 100 * maxValues[1] : val2,\n    parsed[7] == \"%\" ? val3 / 100 * maxValues[2] : val3,\n    parseFloat(parsed[8]) || undefined\n  ];\n};\n\n/**\n  * @desc convert object / string input to color if necessary\n  * @param {Object | String | color} value - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  * @return {color} color instance\n*/\nfunction getColor(value) {\n  return value instanceof color ? value : new color(value);\n};\n\n/**\n  * @desc clamp value between min and max\n  * @param {Number} value\n  * @param {Number} min\n  * @param {Number} max\n  * @return {Number}\n*/\nfunction clamp(value, min, max) {\n  return value <= min ? min : value >= max ? max : value;\n};\n\n/**\n  * @desc compare values between two objects, returns a object representing changes with true/false values\n  * @param {Object} a\n  * @param {Object} b\n  * @return {Object}\n*/\nfunction compareObjs(a, b) {\n  var changes = {};\n  for (var key in a) changes[key] = b[key] != a[key];\n  return changes;\n};\n\nexport default class color {\n  /**\n    * @constructor color object\n    * @param {Object | String | color} value - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  */\n  constructor(value) {\n    // The watch callback function for this color will be stored here\n    this._onChange = false;\n    // The default color value\n    this._value = {h: undefined, s: undefined, v: undefined};\n    if (value) this.set(value);\n  }\n\n  /**\n    * @desc mix two colors\n    * @param {Object | String | color} color1 - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Object | String | color} color2 - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} weight - closer to 0 = more color1, closer to 100 = more color2\n    * @return {color} color instance\n  */\n  static mix(color1, color2, weight) {\n    var rgb1 = getColor(color1).rgb,\n      rgb2 = getColor(color2).rgb;\n    weight = clamp((weight / 100 || 0.5), 0, 1);\n    return new color({\n      r: floor(rgb1.r + (rgb2.r - rgb1.r) * weight),\n      g: floor(rgb1.g + (rgb2.g - rgb1.g) * weight),\n      b: floor(rgb1.b + (rgb2.b - rgb1.b) * weight),\n    });\n  }\n\n  /**\n    * @desc lighten color by amount\n    * @param {Object | String | color} color - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} amount\n    * @return {color} color instance\n  */\n  static lighten(color, amount) {\n    var col = getColor(color),\n       hsv = col.hsv;\n    hsv.v = clamp(hsv.v + amount, 0, 100);\n    col.hsv = hsv;\n    return col;\n  }\n\n  /**\n    * @desc darken color by amount\n    * @param {Object | String | color} color - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} amount\n    * @return {color} color instance\n  */\n  static darken(color, amount) {\n    var col = getColor(color),\n        hsv = col.hsv;\n    hsv.v = clamp(hsv.v - amount, 0, 100);\n    col.hsv = hsv;\n    return col;\n  }\n\n  /**\n    * @desc convert hsv object to rgb\n    * @param {Object} hsv - hsv object\n    * @return {Object} rgb object\n  */\n  static hsv2Rgb(hsv) {\n    var r, g, b, i, f, p, q, t;\n    var h = hsv.h/360, s = hsv.s/100, v = hsv.v/100;\n    i = floor(h * 6);\n    f = h * 6 - i;\n    p = v * (1 - s);\n    q = v * (1 - f * s);\n    t = v * (1 - (1 - f) * s);\n    switch (i % 6) {\n      case 0: r = v, g = t, b = p; break;\n      case 1: r = q, g = v, b = p; break;\n      case 2: r = p, g = v, b = t; break;\n      case 3: r = p, g = q, b = v; break;\n      case 4: r = t, g = p, b = v; break;\n      case 5: r = v, g = p, b = q; break;\n    }\n    return {r: round(r * 255), g: round(g * 255), b: round(b * 255)};\n  }\n\n  /**\n    * @desc convert rgb object to hsv\n    * @param {Object} rgb - rgb object\n    * @return {Object} hsv object\n  */\n  static rgb2Hsv(rgb) {\n    var r = rgb.r / 255,\n      g = rgb.g / 255,\n      b = rgb.b / 255,\n      max = Math.max(r, g, b),\n      min = Math.min(r, g, b),\n      delta = max - min,\n      hue;\n    switch (max) {\n      case min: hue = 0; break;\n      case r: hue = (g - b) / delta + (g < b ? 6 : 0); break;\n      case g: hue = (b - r) / delta + 2; break;\n      case b: hue = (r - g) / delta + 4; break;\n    }\n    hue /= 6;\n    return {\n      h: hue * 360,\n      s: max == 0 ? 0 : (delta / max) * 100,\n      v: max * 100\n    }\n  }\n\n  /**\n    * @desc convert hsv object to hsl\n    * @param {Object} hsv - hsv object\n    * @return {Object} hsl object\n  */\n  static hsv2Hsl(hsv) {\n    var s = hsv.s / 100,\n      v = hsv.v / 100;\n    var l = 0.5 * v * (2 - s);\n    s = v * s / (1 - Math.abs(2 * l - 1));\n    return {\n      h: hsv.h,\n      s: s * 100 || 0,\n      l: l * 100\n    };\n  }\n\n  /**\n    * @desc convert hsl object to hsv\n    * @param {Object} hsl - hsl object\n    * @return {Object} hsv object\n  */\n  static hsl2Hsv(hsl) {\n    var s = hsl.s / 100,\n    l = hsl.l / 100;\n    l *= 2;\n    s *= (l <= 1) ? l : 2 - l;\n    return {\n      h: hsl.h,\n      s: ((2 * s) / (l + s)) * 100,\n      v: ((l + s) / 2) * 100\n    };\n  }\n\n  /**\n    * @desc convert hsl object to string\n    * @param {Object} hsl - hsl object\n    * @return {Object} hsl string\n  */\n  static hsl2Str(hsl) {\n    return \"hsl\" + (hsl.a ? \"a\" : \"\") + \"(\" + hsl.h + \", \" + hsl.s + \"%, \" + hsl.l + \"%\" + (hsl.a ? \", \" + hsl.a : \"\") + \")\";\n  }\n\n  /**\n    * @desc convert rgb object to string\n    * @param {Object} rgb - rgb object\n    * @return {Object} rgb string\n  */\n  static rgb2Str(rgb) {\n    return \"rgb\" + (rgb.a ? \"a\" : \"\") + \"(\" + rgb.r + \", \" + rgb.g + \", \" + rgb.b + (rgb.a ? \", \" + rgb.a : \"\") + \")\";\n  }\n\n  /**\n    * @desc convert rgb object to hex string\n    * @param {Object} rgb - rgb object\n    * @return {Object} hex string\n  */\n  static rgb2Hex(rgb) {\n    var str = \"#\";\n    str += rgb.r.toString(16).padStart(2, \"0\");\n    str += rgb.g.toString(16).padStart(2, \"0\");\n    str += rgb.b.toString(16).padStart(2, \"0\");\n    return str;\n  }\n\n  /**\n    * @desc parse hex string\n    * @param {String} hex - color string\n    * @return {Object} rgb object\n  */\n  static parseHexStr(hex) {\n    // Strip any \"#\" characters\n    hex = hex.replace(\"#\", \"\");\n    // Prefix the hex string with \"0x\" which indicates a number in hex notation, then convert to an integer\n    var int = parseInt(\"0x\" + hex),\n        // If the length of the input is only 3, then it is a shorthand hex color\n        isShorthand = hex.length == 3,\n        // bitMask for isolating each channel\n        bitMask = isShorthand ? 0xF : 0xFF,\n        // bitLength of each channel (for example, F is 4 bits long while FF is 8 bits long)\n        bitLength = isShorthand ? 4 : 8,\n        // If we're using shorthand notation, multiply each channel by 17\n        multiplier = isShorthand ? 17 : 1;\n    return {\n      r: ((int >> (bitLength * 2)) & bitMask) * multiplier,\n      g: ((int >> bitLength) & bitMask) * multiplier,\n      b: (int & bitMask) * multiplier,\n    };\n  }\n\n  /**\n    * @desc parse hsl string\n    * @param {String} str - color string\n    * @return {Object} hsl object\n  */\n  static parseHslStr(str) {\n    var parsed = parseColorStr(str, [360, 100, 100]);\n    return {\n      h: parsed[2],\n      s: parsed[3],\n      l: parsed[4]\n    };\n  }\n\n  /**\n    * @desc parse rgb string\n    * @param {String} str - color string\n    * @return {Object} rgb object\n  */\n  static parseRgbStr(str) {\n    var parsed = parseColorStr(str, [255, 255, 255]);\n    return {\n      r: parsed[1],\n      g: parsed[2],\n      b: parsed[3]\n    };\n  }\n\n  get hsv() {\n    // _value is cloned to allow changes to be made to the values before passing them back\n    var v = this._value;\n    return {h: v.h, s: v.s, v: v.v};\n  }\n\n  set hsv(newValue) {\n    // If this color is being watched for changes we need to compare the new and old values to check the difference\n    // Otherwise we can just be lazy\n    if (this._onChange) {\n      var oldValue = this._value;\n      for (var channel in oldValue) {\n        if (!newValue.hasOwnProperty(channel)) newValue[channel] = oldValue[channel];\n      }\n      var changes = compareObjs(oldValue, newValue);\n      // Update the old value\n      this._value = newValue;\n      // If the value has changed, call hook callback\n      if (changes.h || changes.s || changes.v) this._onChange(this, changes);\n    } else {\n      this._value = newValue;\n    }\n  }\n\n  get rgb() {\n    var rgb = color.hsv2Rgb(this._value);\n    return {\n      r: round(rgb.r),\n      g: round(rgb.g),\n      b: round(rgb.b),\n    };\n  }\n\n  set rgb(value) {\n    this.hsv = color.rgb2Hsv(value);\n  }\n\n  get hsl() {\n    var hsl = color.hsv2Hsl(this._value);\n    return {\n      h: round(hsl.h),\n      s: round(hsl.s),\n      l: round(hsl.l),\n    };\n  }\n\n  set hsl(value) {\n    this.hsv = color.hsl2Hsv(value);\n  }\n\n  get rgbString() {\n    return color.rgb2Str(this.rgb);\n  }\n\n  set rgbString(value) {\n    this.rgb = color.parseRgbStr(value);\n  }\n\n  get hexString() {\n    return color.rgb2Hex(this.rgb);\n  }\n\n  set hexString(value) {\n    this.rgb = color.parseHexStr(value);\n  }\n\n  get hslString() {\n    return color.hsl2Str(this.hsl);\n  }\n\n  set hslString(value) {\n    this.hsl = color.parseHslStr(value);\n  }\n\n  /**\n    * @desc set the color from any valid value\n    * @param {Object | String | color} value - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n  */\n  set(value) {\n    if (typeof value == \"object\") {\n      if (value instanceof color) {\n        this.hsv = color._value;\n      } else if (\"r\" in value) {\n        this.rgb = value;\n      } else if (\"v\" in value) {\n        this.hsv = value;\n      } else if (\"l\" in value) {\n        this.hsl = value;\n      }\n    } else if (typeof value == \"string\") {\n      if (/^rgb/.test(value)) {\n        this.rgbString = value;\n      } else if (/^hsl/.test(value)) {\n        this.hslString = value;\n      } else if (/^#[0-9A-Fa-f]/.test(value)) {\n        this.hexString = value;\n      }\n    }\n  }\n\n  /**\n    * @desc shortcut to set a specific channel value\n    * @param {String} model - hsv | hsl | rgb\n    * @param {String} channel - individual channel to set, for example if model = hsl, chanel = h | s | l\n    * @param {Number} value - new value for the channel\n  */\n  setChannel(model, channel, value) {\n    var v = this[model];\n    v[channel] = value;\n    this[model] = v;\n  }\n\n  /**\n    * @desc make new color instance with the same value as this one\n    * @return {color}\n  */\n  clone() {\n    return new color(this);\n  }\n\n  /**\n    * @desc compare this color against another, returns a object representing changes with true/false values\n    * @param {Object | String | color} color - color to compare against\n    * @param {String} model - hsv | hsl | rgb\n    * @return {Object}\n  */\n  compare(color, model) {\n    model = model || \"hsv\";\n    return compareObjs(this[model], getColor(color)[model]);\n  }\n\n  /**\n    * @desc mix a color into this one\n    * @param {Object | String | color} color - color instance, object (hsv, hsl or rgb), string (hsl, rgb, hex)\n    * @param {Number} weight - closer to 0 = more current color, closer to 100 = more new color\n  */\n  mix(color, weight) {\n    this.hsv = color.mix(this, color, weight).hsv;\n  }\n\n  /**\n    * @desc lighten color by amount\n    * @param {Number} amount\n  */\n  lighten(amount) {\n    color.lighten(this, amount);\n  }\n\n  /**\n    * @desc darken color by amount\n    * @param {Number} amount\n  */\n  darken(amount) {\n    color.darken(this, amount);\n  }\n}","import handle from \"./handle\";\nimport base from \"./base\";\nimport iroColor from \"../color\";\n\n// css class prefix for this element\nvar CLASS_PREFIX = \"iro__slider\";\n\nexport default class slider extends base {\n  /**\n    * @constructor slider UI\n    * @param {svgRoot} svg - svgRoot object\n    * @param {Object} opts - options\n  */\n  constructor(parent, opts) {\n    super(parent, CLASS_PREFIX);\n    var svg = parent.svg;\n    var r = opts.r,\n    w = opts.w,\n    h = opts.h,\n    x = opts.x,\n    y = opts.y,\n    borderWidth = opts.border.w;\n    // \"range\" limits how far the slider's marker can travel, and where it stops and starts along the X axis\n    opts.range = {\n      min: r,\n      max: w - r,\n      w: w - (r * 2)\n    };\n    opts.sliderType = opts.sliderType || \"v\";\n    this.type = \"slider\";\n    this._opts = opts;\n    var baseGroup = this.g;\n    var radius = r + borderWidth / 2;\n    var rect = baseGroup.insert(\"rect\", {\n      class: CLASS_PREFIX + \"__value\",\n      rx: radius,\n      ry: radius,\n      x: x - borderWidth / 2,\n      y: y - borderWidth / 2,\n      width: w + borderWidth,\n      height: h + borderWidth,\n      strokeWidth: borderWidth,\n      stroke: opts.border.color,\n    });\n    rect.setGradient(\"fill\", svg.gradient(\"linear\", {\n      0: {color: \"#000\"},\n      100: {color: \"#fff\"}\n    }));\n    this._gradient = rect.gradient;\n    this.handle = new handle(baseGroup, opts.marker);\n  }\n\n  /**\n    * @desc updates this element to represent a new color value\n    * @param {Object} color - an iroColor object with the new color value\n    * @param {Object} changes - an object that gives a boolean for each HSV channel, indicating whether ot not that channel has changed\n  */\n  update(color, changes) {\n    var opts = this._opts;\n    var range = opts.range;\n    var hsv = color.hsv;\n    var hsl = iroColor.hsv2Hsl({h: hsv.h, s: hsv.s, v: 100});\n    if (opts.sliderType == \"v\") {\n      if (changes.h || changes.s) {\n        this._gradient.stops[1].setAttrs({stopColor: \"hsl(\" + hsl.h + \",\" + hsl.s + \"%,\" + hsl.l + \"%)\"});\n      }\n      if (changes.v) {\n        var percent = (hsv.v / 100);\n        this.handle.move((opts.x + opts.r) + (percent * range.w), opts.y + (opts.h / 2));\n      }\n    }\n  }\n\n  /**\n    * @desc Takes a point at (x, y) and returns HSV values based on this input -- use this to update a color from mouse input\n    * @param {Number} x - point x coordinate\n    * @param {Number} y - point y coordinate\n    * @param {String} type - input type, START, MOVE, END\n    * @return {Object} - new HSV color values (some channels may be missing)\n  */\n  input(x, y, type) {\n    var opts = this._opts;\n    var range = opts.range;\n    var dist = Math.max(Math.min(x, range.max), range.min) - range.min;\n    return {\n      v: Math.round((100 / range.w) * dist),\n    };\n  }\n}","var GRADIENT_INDEX = 0;\nvar GRADIENT_SUFFIX = \"Gradient\";\nvar SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\nvar SVG_ATTRIBUTE_SHORTHANDS = {\n  class: \"class\",\n  stroke: \"stroke\",\n  strokeWidth: \"stroke-width\",\n  fill: \"fill\",\n  opacity: \"opacity\",\n  offset: \"offset\",\n  stopColor: \"stop-color\",\n  stopOpacity: \"stop-opacity\",\n};\n// TODO: figure out why these aren't being compressed properly?\nvar SVG_TRANSFORM_SHORTHANDS = {\n  translate: \"setTranslate\",\n  scale: \"setScale\",\n  rotate: \"setRotate\"\n};\n// sniff useragent string to check if the user is running IE, Edge or Safari\nvar ua = window.navigator.userAgent.toLowerCase();\nvar IS_IE = /msie|trident|edge/.test(ua);\nvar IS_SAFARI = /^((?!chrome|android).)*safari/i.test(ua);\n\nclass svgElement {\n  /**\n    * @constructor svg element wrapper\n    * @param {svgRoot} root - svgRoot object\n    * @param {svgElement | Element} parent - parent node \n    * @param {String} type - element tag name\n    * @param {Object} attrs - element attributes\n  */\n  constructor(root, parent, type, attrs) {\n    var el = document.createElementNS(SVG_NAMESPACE, type);\n    this.el = el;\n    this.setAttrs(attrs);\n    (parent.el || parent).appendChild(el);\n    this._root = root;\n    this._svgTransforms = {};\n    this._transformList = el.transform ? el.transform.baseVal : false;\n  }\n\n  /**\n    * @desc insert a new svgElement\n    * @param {String} type - element tag name\n    * @param {Object} attrs - element attributes\n  */\n  insert(type, attrs) {\n    return new svgElement(this._root, this, type, attrs);\n  }\n\n  /**\n    * @desc shorthand to insert a new group svgElement\n    * @param {Object} attrs - element attributes\n  */\n  g(attrs) {\n    return this.insert(\"g\", attrs);\n  }\n\n  /**\n    * @desc shorthand to insert a new arc svgElement\n    * @param {Number} cx - arc center x\n    * @param {Number} cy - arc center y\n    * @param {Number} radius - arc radius\n    * @param {Number} startAngle - arc start angle (in degrees)\n    * @param {Number} endAngle - arc end angle (in degrees)\n    * @param {Object} attrs - element attributes\n  */\n  arc(cx, cy, radius, startAngle, endAngle, attrs) {\n    var largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    startAngle *= Math.PI / 180;\n    endAngle *= Math.PI / 180;\n    var x1 = cx + radius * Math.cos(endAngle),\n        y1 = cy + radius * Math.sin(endAngle),\n        x2 = cx + radius * Math.cos(startAngle),\n        y2 = cy + radius * Math.sin(startAngle);\n    attrs = attrs || {};\n    attrs.d = [\"M\", x1, y1, \"A\", radius, radius, 0, largeArcFlag, 0, x2, y2].join(\" \");\n    return this.insert(\"path\", attrs);\n  }\n  \n  /**\n    * @desc shorthand to insert a new circle svgElement\n    * @param {Number} cx - circle center x\n    * @param {Number} cy - circle center y\n    * @param {Number} radius - circle radius\n    * @param {Object} attrs - element attributes\n  */\n  circle(cx, cy, radius, attrs) {\n    attrs = attrs || {};\n    attrs.cx = cx;\n    attrs.cy = cy;\n    attrs.r = radius;\n    return this.insert(\"circle\", attrs);\n  }\n\n  /**\n    * @desc set a rotate/translate/scale transform on this element\n    * @param {String} type - transform (rotate | translate | scale)\n    * @param {Array} args - transform values\n  */\n  setTransform(type, args) {\n    if (!IS_IE) {  \n      var transform, transformFn;\n      var svgTransforms = this._svgTransforms;\n      if (!svgTransforms[type]) {\n        transform = this._root.el.createSVGTransform();\n        svgTransforms[type] = transform;\n        this._transformList.appendItem(transform);\n      } else {\n        transform = svgTransforms[type];\n      }\n      transformFn = (type in SVG_TRANSFORM_SHORTHANDS) ? SVG_TRANSFORM_SHORTHANDS[type] : type;\n      transform[transformFn].apply(transform, args);\n    } else {\n      // Microsoft still can't make a web browser that actually works, as such, Edge + IE dont implement SVG transforms properly.\n      // We have to force them instead... geez\n      this.setAttrs({\"transform\": type + \"(\" + args.join(\", \") + \")\"});\n    }\n  }\n\n  /**\n    * @desc set attributes on this element\n    * @param {Object} attrs - element attributes\n  */\n  setAttrs(attrs) {\n    for (var attr in attrs) {\n      var name = (attr in SVG_ATTRIBUTE_SHORTHANDS) ? SVG_ATTRIBUTE_SHORTHANDS[attr] : attr;\n      this.el.setAttribute(name, attrs[attr]);\n    }\n  }\n\n  setGradient(attr, gradient) {\n    var attrs = {};\n    attrs[attr] = gradient.getUrl();\n    gradient._refs[attr] = this;\n    this.gradient = gradient;\n    this.setAttrs(attrs);\n  }\n}\n\nclass svgGradient {\n  /**\n    * @constructor svg gradient wrapper\n    * @param {svgRoot} root - svgRoot object\n    * @param {String} type - gradient type (linear | radial)\n    * @param {Object} stops - gradient stops = {color, opacity} keyed by offset value\n  */\n  constructor(root, type, stops) {\n    var stopElements = [];\n    var gradient = root._defs.insert(type + GRADIENT_SUFFIX, {\n      id: \"iro\" + GRADIENT_SUFFIX + (GRADIENT_INDEX++)\n    });\n    for (var offset in stops) {\n      var stop = stops[offset];\n      stopElements.push(gradient.insert(\"stop\", {\n        offset: offset + \"%\",\n        stopColor: stop.color,\n        stopOpacity: stop.opacity === undefined ? 1 : stop.opacity,\n      }));\n    }\n    this.el = gradient.el;\n    this.stops = stopElements;\n    this._refs = {};\n  }\n\n  getUrl(base) {\n    var root = IS_SAFARI ? (base || window.location.href) : \"\";\n    return \"url(\" + root + \"#\" + this.el.id + \")\";\n  }\n}\n\nexport default class svgRoot extends svgElement {\n  /**\n    * @constructor svg root element (inherits svgElement)\n    * @param {svgElement | Element} parent - parent node \n    * @param {Number} width - svg width\n    * @param {Number} height - svg height\n  */\n  constructor(parent, width, height, display) {\n    super(null, parent, \"svg\", {\n      width, \n      height, \n      style: \"display:\" + (display || \"block\") + \";touch-action:none\"\n    });\n    this._root = this;\n    this._defs = this.insert(\"defs\");\n    this._gradients = [];\n  }\n\n  gradient(type, stops) {\n    var gradient = new svgGradient(this, type, stops);\n    this._gradients.push(gradient);\n    return gradient;\n  }\n\n  updateUrls(base) {\n    if (IS_SAFARI) {\n      var gradients = this._gradients;\n      for (var i = 0; i < gradients.length; i++) {\n        for (var key in gradients[i]._refs) {\n          var attrs = {};\n          attrs[key] = gradients[i].getUrl(base);\n          gradients[i]._refs[key].setAttrs(attrs);\n        }\n      }\n    }\n  }\n}","export default class stylesheet {\n  /**\n    @constructor stylesheet writer\n  */\n  constructor() {\n    // Create a new style element\n    let style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    // Webkit apparently requires a text node to be inserted into the style element\n    // (according to https://davidwalsh.name/add-rules-stylesheets)\n    style.appendChild(document.createTextNode(\"\"));\n    this.style = style;\n    // Create a reference to the style element's CSSStyleSheet object\n    // CSSStyleSheet API: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet\n    let sheet = style.sheet;\n    this.sheet = sheet;\n    // Get a reference to the sheet's CSSRuleList object\n    // CSSRuleList API: https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList\n    this.rules = sheet.rules || sheet.cssRules;\n    // We'll store references to all the CSSStyleDeclaration objects that we change here, keyed by the CSS selector they belong to\n    // CSSStyleDeclaration API: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration\n    this.map = {};\n  }\n\n  /**\n    * @desc Set a specific rule for a given selector\n    * @param {String} selector - the CSS selector for this rule (e.g. \"body\", \".class\", \"#id\")\n    * @param {String} property - the CSS property to set (e.g. \"background-color\", \"font-family\", \"z-index\")\n    * @param {String} value    - the new value for the rule (e.g. \"rgb(255, 255, 255)\", \"Helvetica\", \"99\")\n  */\n  setRule(selector, property, value) {\n    var sheet = this.sheet;\n    var rules = sheet.rules || sheet.cssRules;\n    var map = this.map;\n    // Convert property from camelCase to snake-case\n    property = property.replace(/([A-Z])/g, function($1) {\n      return \"-\" + $1.toLowerCase();\n    });\n    if (!map.hasOwnProperty(selector)) {\n      // If the selector hasn't been used yet we want to insert the rule at the end of the CSSRuleList, so we use its length as the index value\n      var index = rules.length;\n      // Prepare the rule declaration text, since both insertRule and addRule take this format\n      var declaration = property + \": \" + value;\n      // Insert the new rule into the stylesheet\n      try {\n        // Some browsers only support insertRule, others only support addRule, so we have to use both\n        sheet.insertRule(selector + \" {\" + declaration + \";}\", index);\n      } catch(e) {\n        sheet.addRule(selector, declaration, index);\n      } finally {\n        // Because safari is perhaps the worst browser in all of history, we have to remind it to keep the sheet rules up-to-date\n        rules = sheet.rules || sheet.cssRules;\n        // Add our newly inserted rule's CSSStyleDeclaration object to the internal map\n        map[selector] = rules[index].style;\n      }\n    }\n    else {\n      map[selector].setProperty(property, value);\n    }\n  }\n\n  get enabled() {\n    return !this.sheet.disabled;\n  }\n\n  set enabled(value) {\n    this.sheet.disabled = !value;\n  }\n\n  /**\n    * @desc Get the stylesheet text\n    * @return {String} css text\n  */\n  get cssText() {\n    var map = this.map;\n    var ret = [];\n    for (var selector in map) {\n      ret.push(selector.replace(/,\\W/g, \",\\n\") + \" {\\n\\t\" + map[selector].cssText.replace(/;\\W/g, \";\\n\\t\") + \"\\n}\");\n    }\n    return ret.join(\"\\n\");\n  }\n\n  /**\n    * @desc Get an object representing the current css styles\n    * @return {Object} css object\n  */\n  get css() {\n    var map = this.map;\n    var ret = {};\n    for (var selector in map) {\n      var ruleSet = map[selector];\n      ret[selector] = {};\n      for (var i = 0; i < ruleSet.length; i++) {\n        var property = ruleSet[i];\n        ret[selector][property] = ruleSet.getPropertyValue(property);\n      }\n    }\n    return ret;\n  }\n}","import wheel from \"components/wheel\";\nimport slider from \"components/slider\";\nimport svg from \"util/svg\";\nimport {whenReady} from \"util/dom\";\nimport iroColor from \"./color\";\nimport iroStyleSheet from \"./stylesheet\";\n\nexport default class colorPicker {\n  /**\n    * @constructor color wheel object\n    * @param {Element | String} el - a DOM element or the CSS selector for a DOM element to use as a container for the UI\n    * @param {Object} opts - options for this instance\n  */\n  constructor(el, opts) {\n    opts = opts || {};\n    // event storage for `on` and `off`\n    this._events = {};\n    this._mouseTarget = false;\n    this._colorChangeActive = false;\n    this.css = opts.css || opts.styles || undefined;\n    // Wait for the document to be ready, then mount the UI\n    whenReady(() => {this._mount(el, opts)});\n  }\n\n  /**\n    * @desc mount the color picker UI into the DOM\n    * @param {Element | String} el - a DOM element or the CSS selector for a DOM element to use as a container for the UI\n    * @param {Object} opts - options for this instance\n    * @access protected\n  */\n  _mount(el, opts) {\n    // If `el` is a string, use it to select an Element, else assume it's an element\n    el = (\"string\" == typeof el) ? document.querySelector(el) : el;\n    // Find the width and height for the UI\n    // If not defined in the options, try the HTML width + height attributes of the wrapper, else default to 320\n    var width = opts.width || parseInt(el.width) || 320;\n    var height = opts.height || parseInt(el.height) || 320;\n    // Calculate layout variables\n    var padding = opts.padding + 2 || 6,\n        borderWidth = opts.borderWidth || 0,\n        markerRadius = opts.markerRadius || 8,\n        sliderMargin = opts.sliderMargin || 24,\n        sliderHeight = opts.sliderHeight || markerRadius * 2 + padding * 2 + borderWidth * 2,\n        bodyWidth = Math.min(height - sliderHeight - sliderMargin, width),\n        wheelRadius = bodyWidth / 2 - borderWidth,\n        leftMargin = (width - bodyWidth) / 2;\n    var marker = {\n      r: markerRadius\n    };\n    var borderStyles = {\n      w: borderWidth,\n      color: opts.borderColor || \"#fff\",\n    };\n\n    // Create UI elements\n    this.el = el;\n    this.svg = new svg(el, width, height, opts.display);\n    this.ui = [\n      new wheel(this, {\n        cX: leftMargin + bodyWidth / 2,\n        cY: bodyWidth / 2,\n        r: wheelRadius,\n        rMax: wheelRadius - (markerRadius + padding),\n        marker: marker,\n        border: borderStyles,\n        lightness: opts.wheelLightness == undefined ? true : opts.wheelLightness,\n        anticlockwise: opts.anticlockwise\n      }),\n      new slider(this, {\n        sliderType: \"v\",\n        x: leftMargin + borderWidth,\n        y: bodyWidth + sliderMargin,\n        w: bodyWidth - borderWidth * 2,\n        h: sliderHeight - borderWidth * 2,\n        r: sliderHeight / 2 - borderWidth,\n        marker: marker,\n        border: borderStyles\n      })\n    ];\n    // Create an iroStyleSheet for this colorWheel's CSS overrides\n    this.stylesheet = new iroStyleSheet();\n    // Create an iroColor to store this colorWheel's selected color\n    this.color = new iroColor();\n    // Whenever the selected color changes, trigger a colorWheel update too\n    this.color._onChange = this._update.bind(this);\n    this.color.set(opts.color || opts.defaultValue || \"#fff\")\n    // Hacky workaround for a couple of Safari SVG url bugs\n    // See https://github.com/jaames/iro.js/issues/18\n    // TODO: perhaps make this a seperate plugin, it's hacky and takes up more space than I'm happy with\n    this.on(\"history:stateChange\", (base) => {this.svg.updateUrls(base)});\n    // Listen to events\n    // listen(this.svg.el, [EVENT_MOUSEDOWN, EVENT_TOUCHSTART], this);\n    this.emit(\"mount\", this);\n  }\n\n  /**\n    * @desc update the selected color\n    * @param {Object} newValue - the new HSV values\n    * @param {Object} oldValue - the old HSV values\n    * @param {Object} changes - booleans for each HSV channel: true if the new value is different to the old value, else false\n    * @access protected\n  */\n  _update(color, changes) {\n    var rgb = color.rgbString;\n    var css = this.css;\n    // Loop through each UI element and update it\n    for (var i = 0; i < this.ui.length; i++) {\n      this.ui[i].update(color, changes); \n    }\n    // Update the stylesheet too\n    for (var selector in css) {\n      var properties = css[selector];\n      for (var prop in properties) {\n        this.stylesheet.setRule(selector, prop, rgb);\n      }\n    } \n    // Prevent infinite loops if the color is set inside a `color:change` callback\n    if (!this._colorChangeActive) {\n      // While _colorChangeActive = true, this event cannot be fired\n      this._colorChangeActive = true;\n      this.emit(\"color:change\", color, changes);\n      this._colorChangeActive = false;\n    }\n  }\n\n  /**\n    * @desc Set a callback function for an event\n    * @param {String} eventType The name of the event to listen to, pass \"*\" to listen to all events\n    * @param {Function} callback The watch callback\n  */\n  on(eventType, callback) {\n    var events = this._events;\n    (events[eventType] || (events[eventType] = [])).push(callback);\n  }\n\n  /**\n    * @desc Remove a callback function for an event added with on()\n    * @param {String} eventType The name of the event\n    * @param {Function} callback The watch callback to remove from the event\n  */\n  off(eventType, callback) {\n    var eventList = this._events[eventType];\n    if (eventList) eventList.splice(eventList.indexOf(callback), 1);\n  }\n\n  /**\n    * @desc Emit an event\n    * @param {String} eventType The name of the event to emit\n    * @param {Array} args array of args to pass to callbacks\n  */\n  emit(eventType, ...args) {\n    var events = this._events,\n        callbackList = (events[eventType] || []).concat((events[\"*\"] || []));\n    for (var i = 0; i < callbackList.length; i++) {\n      callbackList[i].apply(null, args); \n    }\n  }\n}","import colorPicker from \"./colorPicker\";\nimport color from \"./color\";\nimport stylesheet from \"./stylesheet\";\n\nexport default {\n  Color: color,\n  ColorPicker: colorPicker,\n  Stylesheet: stylesheet,\n  version: process.env.VERSION,\n};\n"],"names":["handle","constructor","svg","props","baseGroup","g","circle","r","CLASS_PREFIX","move","x","y","setTransform","const","EVENT_READYSTATE_CHANGE","READYSTATE_COMPLETE","listen","el","eventList","callback","params","i","length","addEventListener","unlisten","removeEventListener","baseComponent","parent","className","this","handleEvent","e","preventDefault","hsv","point","touches","changedTouches","getBoundingClientRect","clientX","rect","left","clientY","top","color","type","document","input","emit","PI","Math","sqrt","abs","round","wheel","opts","_opts","cY","cX","border","w","class","fill","stroke","strokeWidth","ringGroup","hue","arc","anticlockwise","setGradient","gradient","opacity","_lightness","marker","update","changes","v","lightness","setAttrs","toFixed","h","s","hueAngle","dist","rMax","cos","sin","rangeMax","angle","atan2","min","base","floor","parseColorStr","str","maxValues","parsed","match","val1","parseInt","val2","val3","parseFloat","undefined","getColor","value","clamp","max","compareObjs","a","b","key","_onChange","_value","set","mix","color1","color2","weight","rgb1","rgb","rgb2","lighten","amount","col","darken","hsv2Rgb","f","p","q","t","rgb2Hsv","delta","hsv2Hsl","l","hsl2Hsv","hsl","hsl2Str","rgb2Str","rgb2Hex","toString","padStart","parseHexStr","hex","replace","int","isShorthand","bitLength","bitMask","multiplier","parseHslStr","parseRgbStr","prototypeAccessors","newValue","oldValue","channel","hasOwnProperty","rgbString","hexString","hslString","test","setChannel","model","clone","compare","slider","borderWidth","range","sliderType","radius","insert","rx","ry","width","height","_gradient","iroColor","stops","stopColor","percent","GRADIENT_INDEX","SVG_ATTRIBUTE_SHORTHANDS","offset","stopOpacity","SVG_TRANSFORM_SHORTHANDS","translate","scale","rotate","ua","window","navigator","userAgent","toLowerCase","IS_IE","IS_SAFARI","svgElement","root","attrs","createElementNS","appendChild","_root","_svgTransforms","_transformList","transform","baseVal","cx","cy","startAngle","endAngle","largeArcFlag","x1","d","y1","x2","y2","join","args","svgTransforms","createSVGTransform","appendItem","apply","attr","name","setAttribute","getUrl","_refs","svgGradient","stopElements","_defs","stop","push","location","href","id","svgRoot","display","style","_gradients","updateUrls","gradients","stylesheet","createElement","head","createTextNode","sheet","rules","cssRules","map","setRule","selector","property","$1","setProperty","index","declaration","insertRule","addRule","enabled","disabled","cssText","ret","css","ruleSet","getPropertyValue","colorPicker","_events","_mouseTarget","_colorChangeActive","styles","_mount","readyState","stateChange","querySelector","padding","markerRadius","sliderMargin","sliderHeight","bodyWidth","borderStyles","borderColor","ui","leftMargin","wheelRadius","wheelLightness","iroStyleSheet","_update","bind","defaultValue","on","properties","prop","eventType","events","off","splice","indexOf","concat","callbackList","Color","ColorPicker","Stylesheet","version","process"],"mappings":";;;;;;;+KACA,IAGqBA,EAMnBC,SAAYC,EAAKC,OACXC,EAAYF,EAAIG,SAVL,kBAaLC,OAAO,EAAG,EAAGH,EAAMI,SACpBC,0BACD,mBACO,SACL,WAEAF,OAAO,EAAG,EAAGH,EAAMI,SACpBC,0BACD,mBACO,SACL,cAELH,EAAID,GAQXK,YAAAA,cAAKC,EAAGC,QACDN,EAAEO,aAAa,aAAcF,EAAGC,KCnCzCE,IAAMC,EAA0B,mBAChCC,EAAsB,WASf,SAASC,EAAOC,EAAIC,EAAWC,EAAUC,0BACzC,IAAIC,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IACpCJ,EAAGM,iBAAiBL,EAAUG,GAAIF,EAAUC,GAUzC,SAASI,EAASP,EAAIC,EAAWC,OACjC,IAAIE,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IACpCJ,EAAGQ,oBAAoBP,EAAUG,GAAIF,GCtBzCN,IAOqBa,EAEnBzB,SAAY0B,EAAQC,OACdvB,EAAIsB,EAAOzB,IAAIG,SACVuB,IAELX,EAAKZ,EAAEY,KACJA,GAda,YAGC,cAW2BY,eAAgB,SAC3DxB,EAAIA,OACJY,GAAKA,OACLU,OAASA,GAGhBG,YAAAA,qBAAYC,KAGRC,qBAQEC,EAPAC,EAAQH,EAAEI,QAAUJ,EAAEK,eAAe,GAAKL,IAEnCF,KAAKZ,GAAGoB,0BAEXH,EAAMI,QAAUC,EAAKC,OACrBN,EAAMO,QAAUF,EAAKG,IAGzBC,EAAQd,KAAKF,OAAOgB,aAChBZ,EAAEa,UAjCU,gBAGC,eAkCVC,UApCS,YAGA,YAFF,UAGC,YAgCqEhB,eAAgB,MAC9FA,KAAKiB,MAAMpC,EAAGC,EAAG,cAClBgB,OAAOoB,KAAK,cAAeJ,aAtChB,gBAGA,cAwCVd,KAAKiB,MAAMpC,EAAGC,EAAG,kBA1CT,cAGC,aA2CTkB,KAAKiB,MAAMpC,EAAGC,EAAG,YAClBgB,OAAOoB,KAAK,YAAaJ,KACrBE,UAjDO,YAGA,YAFF,UAGC,YA6CuEhB,MAGtFI,IAAKU,EAAMV,IAAMA,ICnDzB,IAAIzB,EAAe,aAEfwC,EAAKC,KAAKD,GACVE,EAAOD,KAAKC,KACZC,EACQF,KAAKG,MAEIC,cAMnBpD,WAAY0B,EAAQ2B,eACZ3B,EAAQnB,QACT+C,MAAQD,OACRV,KAAO,YAERY,EAAKF,EAAKE,GACVC,EAAKH,EAAKG,GACVlD,EAAI+C,EAAK/C,EACTmD,EAASJ,EAAKI,OAEdxD,EAAMyB,EAAOzB,IACbE,EAAYyB,KAAKxB,EAErBD,EAAUE,OAAOmD,EAAID,EAAIjD,EAAImD,EAAOC,EAAI,GACtCC,MAAOpD,EAAe,WACtBqD,KAAM,OACNC,OAAQJ,EAAOf,MACfoB,YAAaL,EAAOC,YAGlBK,EAAY5D,EAAUC,GACxBuD,MAAOpD,EAAe,QACtBuD,YAAaxD,EACbsD,KAAM,SAGCI,EAAM,EAAGA,EAAM,IAAKA,IAC3BD,EAAUE,IAAIT,EAAID,EAAIjD,EAAI,EAAG0D,EAAKA,EAAM,KACtCH,OAAQ,QAAUR,EAAKa,cAAgB,IAAMF,EAAMA,GAAO,eAI7C7D,EAAUE,OAAOmD,EAAID,EAAIjD,GACxCqD,MAAOpD,EAAe,iBAGb4D,YAAY,OAAQlE,EAAImE,SAAS,aAExC1B,MAAO,aAGPA,MAAM,OACN2B,QAAS,WAIRC,WAAanE,EAAUE,OAAOmD,EAAID,EAAIjD,GACzCqD,MAAOpD,EAAe,cACtB8D,QAAS,SAGNtE,OAAS,IAAIA,EAAOI,EAAWkD,EAAKkB,kHAQ3CC,gBAAO9B,EAAO+B,OACRpB,EAAOzB,KAAK0B,MACZtB,EAAMU,EAAMV,OAEZyC,EAAQC,GAAKrB,EAAKsB,gBACfL,WAAWM,UAAUP,SAAU,EAAIrC,EAAI0C,EAAI,KAAKG,QAAQ,KAG3DJ,EAAQK,GAAKL,EAAQM,EAAG,KAEtBC,GAAY3B,EAAKa,cAAgB,IAAMlC,EAAI8C,EAAI9C,EAAI8C,IAAM/B,EAAK,KAE9DkC,EAAQjD,EAAI+C,EAAI,IAAO1B,EAAK6B,UAE3BnF,OAAOS,KAAK6C,EAAKG,GAAKyB,EAAOjC,KAAKmC,IAAIH,GAAW3B,EAAKE,GAAK0B,EAAOjC,KAAKoC,IAAIJ,kBAUpFnC,eAAMpC,EAAGC,OACH2C,EAAOzB,KAAK0B,MACZ+B,EAAWhC,EAAK6B,KAEpBzE,EAAI4C,EAAK/C,EAAIG,EACbC,EAAI2C,EAAK/C,EAAII,MAET4E,EAAQtC,KAAKuC,MAAM7E,EAAGD,GAEtBuD,EAAMb,EAAMmC,GAAS,IAAMvC,IAAO,IAGlCkC,EAAOjC,KAAKwC,IAAIvC,EAAKxC,EAAIA,EAAIC,EAAIA,GAAI2E,UAMvCP,EAJFd,EAAOX,EAAKa,cAAgB,IAAMF,EAAMA,EAKtCe,EAAG5B,EAAO,IAAMkC,EAAYJ,QA5GCQ,GCX/BtC,EAAQH,KAAKG,MACbuC,EAAQ1C,KAAK0C,MAQjB,SAASC,EAAcC,EAAKC,OACtBC,EAASF,EAAIG,MAAM,8EACnBC,EAAOC,SAASH,EAAO,IACvBI,EAAOD,SAASH,EAAO,IACvBK,EAAOF,SAASH,EAAO,WAEzBA,EAAO,GACM,KAAbA,EAAO,GAAYE,EAAO,IAAMH,EAAU,GAAKG,EAClC,KAAbF,EAAO,GAAYI,EAAO,IAAML,EAAU,GAAKK,EAClC,KAAbJ,EAAO,GAAYK,EAAO,IAAMN,EAAU,GAAKM,EAC/CC,WAAWN,EAAO,UAAOO,GAS7B,SAASC,EAASC,UACTA,aAAiB7D,EAAQ6D,EAAQ,IAAI7D,EAAM6D,GAUpD,SAASC,EAAMD,EAAOf,EAAKiB,UAClBF,GAASf,EAAMA,EAAMe,GAASE,EAAMA,EAAMF,EASnD,SAASG,EAAYC,EAAGC,OAClBnC,SACC,IAAIoC,KAAOF,EAAGlC,EAAQoC,GAAOD,EAAEC,IAAQF,EAAEE,UACvCpC,EAGT,IAAqB/B,EAKnB1C,SAAYuG,QAELO,WAAY,OAEZC,eAAaV,SAAcA,SAAcA,GAC1CE,GAAO3E,KAAKoF,IAAIT,8JAUtB7D,EAAOuE,aAAIC,EAAQC,EAAQC,OACrBC,EAAOf,EAASY,GAAQI,MACnBhB,EAASa,GAAQG,aACjBd,EAAOY,EAAS,KAAO,GAAM,EAAG,GAClC,IAAI1E,KACNgD,EAAM2B,EAAK/G,GAAKiH,EAAKjH,EAAI+G,EAAK/G,GAAK8G,KACnC1B,EAAM2B,EAAKjH,GAAKmH,EAAKnH,EAAIiH,EAAKjH,GAAKgH,KACnC1B,EAAM2B,EAAKT,GAAKW,EAAKX,EAAIS,EAAKT,GAAKQ,MAU1C1E,EAAO8E,iBAAQ9E,EAAO+E,OAChBC,EAAMpB,EAAS5D,KACVgF,EAAI1F,aACT0C,EAAI8B,EAAMxE,EAAI0C,EAAI+C,EAAQ,EAAG,OAC7BzF,IAAMA,EACH0F,GASThF,EAAOiF,gBAAOjF,EAAO+E,OACfC,EAAMpB,EAAS5D,KACTgF,EAAI1F,aACV0C,EAAI8B,EAAMxE,EAAI0C,EAAI+C,EAAQ,EAAG,OAC7BzF,IAAMA,EACH0F,GAQThF,EAAOkF,iBAAQ5F,OACT1B,EAAGF,EAAGwG,EAAGxF,EAAGyG,EAAGC,EAAGC,EAAGC,EACrBlD,EAAI9C,EAAI8C,EAAE,MAAS9C,EAAI+C,EAAE,MAAS/C,EAAI0C,EAAE,aAGxCA,GAAK,EAAIK,KACTL,GAAK,KAFD,EAAJI,KADAY,EAAU,EAAJZ,KAGOC,KACbL,GAAK,GAAK,EAAImD,GAAK9C,GACf3D,EAAI,QACL,IAAOsD,EAAGtE,EAAI4H,EAAGpB,EAAIkB,aACrB,IAAOC,EAAG3H,EAAIsE,EAAGkC,EAAIkB,aACrB,IAAOA,EAAG1H,EAAIsE,EAAGkC,EAAIoB,aACrB,IAAOF,EAAG1H,EAAI2H,EAAGnB,EAAIlC,aACrB,IAAOsD,EAAG5H,EAAI0H,EAAGlB,EAAIlC,aACrB,IAAOA,EAAGtE,EAAI0H,EAAGlB,EAAImB,WAEjB5E,EAAU,IAAJ7C,KAAa6C,EAAU,IAAJ/C,KAAa+C,EAAU,IAAJyD,KAQzDlE,EAAOuF,iBAAQX,SACThH,EAAIgH,EAAIhH,EAAI,MACVgH,EAAIlH,EAAI,MACRkH,EAAIV,EAAI,MACN5D,KAAKyD,IAAInG,EAAGF,EAAGwG,KACf5D,KAAKwC,IAAIlF,EAAGF,EAAGwG,KACbH,EAAMjB,SAERiB,QACDjB,IAAW,aACXlF,KAAUF,EAAIwG,GAAKsB,GAAS9H,EAAIwG,EAAI,EAAI,cACxCxG,KAAUwG,EAAItG,GAAK4H,EAAQ,aAC3BtB,KAAUtG,EAAIF,GAAK8H,EAAQ,WAIvB,QAFJ,KAGK,GAAPzB,EAAW,EAAKyB,EAAQzB,EAAO,MACzB,IAANA,IASP/D,EAAOyF,iBAAQnG,OACT+C,EAAI/C,EAAI+C,EAAI,MACV/C,EAAI0C,EAAI,IACV0D,EAAI,GAAM1D,GAAK,EAAIK,YACnBL,EAAIK,GAAK,EAAI/B,KAAKE,IAAI,EAAIkF,EAAI,OAE7BpG,EAAI8C,IACA,IAAJC,GAAW,IACP,IAAJqD,IASP1F,EAAO2F,iBAAQC,OACTvD,EAAIuD,EAAIvD,EAAI,MACZuD,EAAIF,EAAI,kBACP,IACM,EAAKA,EAAI,EAAIA,KAEnBE,EAAIxD,IACF,EAAIC,GAAMqD,EAAIrD,GAAM,OACpBqD,EAAIrD,GAAK,EAAK,MASvBrC,EAAO6F,iBAAQD,SACN,OAASA,EAAI3B,EAAI,IAAM,IAAM,IAAM2B,EAAIxD,EAAI,KAAOwD,EAAIvD,EAAI,MAAQuD,EAAIF,EAAI,KAAOE,EAAI3B,EAAI,KAAO2B,EAAI3B,EAAI,IAAM,KAQvHjE,EAAO8F,iBAAQlB,SACN,OAASA,EAAIX,EAAI,IAAM,IAAM,IAAMW,EAAIhH,EAAI,KAAOgH,EAAIlH,EAAI,KAAOkH,EAAIV,GAAKU,EAAIX,EAAI,KAAOW,EAAIX,EAAI,IAAM,KAQhHjE,EAAO+F,iBAAQnB,OACT1B,EAAM,cACH0B,EAAIhH,EAAEoI,SAAS,IAAIC,SAAS,EAAG,QAC/BrB,EAAIlH,EAAEsI,SAAS,IAAIC,SAAS,EAAG,QAC/BrB,EAAIV,EAAE8B,SAAS,IAAIC,SAAS,EAAG,MASxCjG,EAAOkG,qBAAYC,KAEXA,EAAIC,QAAQ,IAAK,QAEnBC,EAAM9C,SAAS,KAAO4C,KAEM,GAAdA,EAAIxH,SAER2H,EAAc,GAAM,MAElBA,EAAc,EAAI,IAEjBA,EAAc,GAAK,YAE7BD,GAAoB,EAAZE,EAAkBC,GAAWC,KACrCJ,GAAOE,EAAaC,GAAWC,KAChCJ,EAAMG,GAAWC,IASzBzG,EAAO0G,qBAAYxD,OACbE,EAASH,EAAcC,GAAM,IAAK,IAAK,eAEtCE,EAAO,KACPA,EAAO,KACPA,EAAO,KASdpD,EAAO2G,qBAAYzD,OACbE,EAASH,EAAcC,GAAM,IAAK,IAAK,eAEtCE,EAAO,KACPA,EAAO,KACPA,EAAO,KAIdwD,EAAItH,uBAEE0C,EAAI9C,KAAKmF,gBACFrC,EAAEI,IAAMJ,EAAEK,IAAML,EAAEA,IAG/B4E,EAAItH,iBAAIuH,MAGF3H,KAAKkF,UAAW,KACd0C,EAAW5H,KAAKmF,WACf,IAAI0C,KAAWD,EACbD,EAASG,eAAeD,KAAUF,EAASE,GAAWD,EAASC,QAElEhF,EAAUiC,EAAY8C,EAAUD,QAE/BxC,OAASwC,GAEV9E,EAAQK,GAAKL,EAAQM,GAAKN,EAAQC,IAAG9C,KAAKkF,UAAUlF,KAAM6C,aAEzDsC,OAASwC,GAIlBD,EAAIhC,uBACEA,EAAM5E,EAAMkF,QAAQhG,KAAKmF,iBAExB5D,EAAMmE,EAAIhH,KACV6C,EAAMmE,EAAIlH,KACV+C,EAAMmE,EAAIV,KAIjB0C,EAAIhC,iBAAIf,QACDvE,IAAMU,EAAMuF,QAAQ1B,IAG3B+C,EAAIhB,uBACEA,EAAM5F,EAAMyF,QAAQvG,KAAKmF,iBAExB5D,EAAMmF,EAAIxD,KACV3B,EAAMmF,EAAIvD,KACV5B,EAAMmF,EAAIF,KAIjBkB,EAAIhB,iBAAI/B,QACDvE,IAAMU,EAAM2F,QAAQ9B,IAG3B+C,EAAIK,gCACKjH,EAAM8F,QAAQ5G,KAAK0F,MAG5BgC,EAAIK,uBAAUpD,QACPe,IAAM5E,EAAM2G,YAAY9C,IAG/B+C,EAAIM,gCACKlH,EAAM+F,QAAQ7G,KAAK0F,MAG5BgC,EAAIM,uBAAUrD,QACPe,IAAM5E,EAAMkG,YAAYrC,IAG/B+C,EAAIO,gCACKnH,EAAM6F,QAAQ3G,KAAK0G,MAG5BgB,EAAIO,uBAAUtD,QACP+B,IAAM5F,EAAM0G,YAAY7C,IAO/BS,YAAAA,aAAIT,GACkB,iBAATA,EACLA,aAAiB7D,OACdV,IAAMU,EAAMqE,OACR,MAAOR,OACXe,IAAMf,EACF,MAAOA,OACXvE,IAAMuE,EACF,MAAOA,SACX+B,IAAM/B,GAEY,iBAATA,IACZ,OAAOuD,KAAKvD,QACToD,UAAYpD,EACR,OAAOuD,KAAKvD,QAChBsD,UAAYtD,EACR,gBAAgBuD,KAAKvD,UACzBqD,UAAYrD,KAWvBwD,YAAAA,oBAAWC,EAAOP,EAASlD,OACrB7B,EAAI9C,KAAKoI,KACXP,GAAWlD,OACRyD,GAAStF,GAOhBuF,YAAAA,wBACS,IAAIvH,EAAMd,OASnBsI,YAAAA,iBAAQxH,EAAOsH,UAENtD,EAAY9E,OADXoI,GAAS,OACe1D,EAAS5D,GAAOsH,KAQlD/C,YAAAA,aAAIvE,EAAO0E,QACJpF,IAAMU,EAAMuE,IAAIrF,KAAMc,EAAO0E,GAAQpF,KAO5CwF,YAAAA,iBAAQC,KACAD,QAAQ5F,KAAM6F,IAOtBE,YAAAA,gBAAOF,KACCE,OAAO/F,KAAM6F,2CC/avB,IAAIlH,EAAe,cAEE4J,cAMnBnK,WAAY0B,EAAQ2B,eACZ3B,EAAQnB,OACVN,EAAMyB,EAAOzB,IACbK,EAAI+C,EAAK/C,EACboD,EAAIL,EAAKK,EACToB,EAAIzB,EAAKyB,EACTrE,EAAI4C,EAAK5C,EACTC,EAAI2C,EAAK3C,EACT0J,EAAc/G,EAAKI,OAAOC,EAE1BL,EAAKgH,OACH7E,IAAKlF,EACLmG,IAAK/C,EAAIpD,EACToD,EAAGA,EAAS,EAAJpD,GAEV+C,EAAKiH,WAAajH,EAAKiH,YAAc,SAChC3H,KAAO,cACPW,MAAQD,MACTlD,EAAYyB,KAAKxB,EACjBmK,EAASjK,EAAI8J,EAAc,EAC3B9H,EAAOnC,EAAUqK,OAAO,QAC1B7G,MAAOpD,EAAe,UACtBkK,GAAIF,EACJG,GAAIH,EACJ9J,EAAGA,EAAI2J,EAAc,EACrB1J,EAAGA,EAAI0J,EAAc,EACrBO,MAAOjH,EAAI0G,EACXQ,OAAQ9F,EAAIsF,EACZtG,YAAasG,EACbvG,OAAQR,EAAKI,OAAOf,QAEtBJ,EAAK6B,YAAY,OAAQlE,EAAImE,SAAS,aAChC1B,MAAO,aACLA,MAAO,gBAEVmI,UAAYvI,EAAK8B,cACjBrE,OAAS,IAAIA,EAAOI,EAAWkD,EAAKkB,kHAQ3CC,gBAAO9B,EAAO+B,OACRpB,EAAOzB,KAAK0B,MACZ+G,EAAQhH,EAAKgH,MACbrI,EAAMU,EAAMV,IACZsG,EAAMwC,EAAS3C,SAASrD,EAAG9C,EAAI8C,EAAGC,EAAG/C,EAAI+C,EAAGL,EAAG,SAC5B,KAAnBrB,EAAKiH,cACH7F,EAAQK,GAAKL,EAAQM,SAClB8F,UAAUE,MAAM,GAAGnG,UAAUoG,UAAW,OAAS1C,EAAIxD,EAAI,IAAMwD,EAAIvD,EAAI,KAAOuD,EAAIF,EAAI,OAEzF3D,EAAQC,GAAG,KACTuG,EAAWjJ,EAAI0C,EAAI,SAClB3E,OAAOS,KAAM6C,EAAK5C,EAAI4C,EAAK/C,EAAM2K,EAAUZ,EAAM3G,EAAIL,EAAK3C,EAAK2C,EAAKyB,EAAI,iBAYnFjC,eAAMpC,EAAGC,EAAGiC,OAEN0H,EADOzI,KAAK0B,MACC+G,MACbpF,EAAOjC,KAAKyD,IAAIzD,KAAKwC,IAAI/E,EAAG4J,EAAM5D,KAAM4D,EAAM7E,KAAO6E,EAAM7E,WAE7Dd,EAAG1B,KAAKG,MAAO,IAAMkH,EAAM3G,EAAKuB,QA9EFQ,GCPhCyF,EAAiB,EAGjBC,GACFxH,MAAO,QACPE,OAAQ,SACRC,YAAa,eACbF,KAAM,OACNS,QAAS,UACT+G,OAAQ,SACRJ,UAAW,aACXK,YAAa,gBAGXC,GACFC,UAAW,eACXC,MAAO,WACPC,OAAQ,aAGNC,EAAKC,OAAOC,UAAUC,UAAUC,cAChCC,EAAQ,oBAAoBjC,KAAK4B,GACjCM,EAAY,iCAAiClC,KAAK4B,GAEhDO,EAQJjM,SAAYkM,EAAMxK,EAAQiB,EAAMwJ,OAC1BnL,EAAK4B,SAASwJ,gBA/BF,6BA+BiCzJ,QAC5C3B,GAAKA,OACL4D,SAASuH,IACbzK,EAAOV,IAAMU,GAAQ2K,YAAYrL,QAC7BsL,MAAQJ,OACRK,uBACAC,iBAAiBxL,EAAGyL,WAAYzL,EAAGyL,UAAUC,SAQpDlC,YAAAA,gBAAO7H,EAAMwJ,UACJ,IAAIF,EAAWrK,KAAK0K,MAAO1K,KAAMe,EAAMwJ,IAOhD/L,YAAAA,WAAE+L,UACOvK,KAAK4I,OAAO,IAAK2B,IAY1BlI,YAAAA,aAAI0I,EAAIC,EAAIrC,EAAQsC,EAAYC,EAAUX,OACpCY,EAAeD,EAAWD,GAAc,IAAM,EAAI,KACxC7J,KAAKD,GAAK,OACZC,KAAKD,GAAK,QAClBiK,EAAKL,EAAKpC,EAASvH,KAAKmC,IAAI2H,KACvBF,EAAKrC,EAASvH,KAAKoC,IAAI0H,KACvBH,EAAKpC,EAASvH,KAAKmC,IAAI0H,KACvBD,EAAKrC,EAASvH,KAAKoC,IAAIyH,YACxBV,OACFc,GAAK,IAAKD,EAAIE,EAAI,IAAK3C,EAAQA,EAAQ,EAAGwC,EAAc,EAAGI,EAAIC,GAAIC,KAAK,KACvEzL,KAAK4I,OAAO,OAAQ2B,IAU7B9L,YAAAA,gBAAOsM,EAAIC,EAAIrC,EAAQ4B,YACbA,OACFQ,GAAKA,IACLC,GAAKA,IACLtM,EAAIiK,EACH3I,KAAK4I,OAAO,SAAU2B,IAQ/BxL,YAAAA,sBAAagC,EAAM2K,MACZvB,OAeEnH,oBAAuBjC,EAAO,IAAM2K,EAAKD,KAAK,MAAQ,UAfjD,KACNZ,EACAc,EAAgB3L,KAAK2K,eACpBgB,EAAc5K,KAKL4K,EAAc5K,MAJdf,KAAK0K,MAAMtL,GAAGwM,uBACZ7K,GAAQ8J,OACjBD,eAAeiB,WAAWhB,MAIlB9J,KAAQ2I,EAA4BA,EAAyB3I,GAAQA,GAC7D+K,MAAMjB,EAAWa,KAY5C1I,YAAAA,kBAASuH,OACF,IAAIwB,KAAQxB,EAAO,KAClByB,EAAQD,KAAQxC,EAA4BA,EAAyBwC,GAAQA,OAC5E3M,GAAG6M,aAAaD,EAAMzB,EAAMwB,MAIrCxJ,YAAAA,qBAAYwJ,EAAMvJ,OACZ+H,OACEwB,GAAQvJ,EAAS0J,WACdC,MAAMJ,GAAQ/L,UAClBwC,SAAWA,OACXQ,SAASuH,IAIlB,IAAM6B,EAOJhO,SAAYkM,EAAMvJ,EAAMoI,OAClBkD,KACA7J,EAAW8H,EAAKgC,MAAM1D,OAAO7H,EArJf,eAsJZ,cAA2BuI,UAE5B,IAAIE,KAAUL,EAAO,KACpBoD,EAAOpD,EAAMK,KACJgD,KAAKhK,EAASoG,OAAO,eACxBY,EAAS,cACN+C,EAAKzL,uBACc2D,IAAjB8H,EAAK9J,QAAwB,EAAI8J,EAAK9J,gBAGlDrD,GAAKoD,EAASpD,QACd+J,MAAQkD,OACRF,UAGPD,YAAAA,gBAAOrI,SAEE,QADIuG,EAAavG,GAAQkG,OAAO0C,SAASC,KAAQ,IACjC,IAAM1M,KAAKZ,GAAGuN,GAAK,KAI9C,IAAqBC,cAOnBxO,WAAY0B,EAAQiJ,EAAOC,EAAQ6D,eAC3B,KAAM/M,EAAQ,aAClBiJ,SACAC,EACA8D,MAAO,YAAcD,GAAW,SAAW,4BAExCnC,MAAQ1K,UACRsM,MAAQtM,KAAK4I,OAAO,aACpBmE,wHAGPvK,kBAASzB,EAAMoI,OACT3G,EAAW,IAAI4J,EAAYpM,KAAMe,EAAMoI,eACtC4D,WAAWP,KAAKhK,GACdA,eAGTwK,oBAAWnJ,MACLuG,UACE6C,EAAYjN,KAAK+M,WACZvN,EAAI,EAAGA,EAAIyN,EAAUxN,OAAQD,QAC/B,IAAIyF,KAAOgI,EAAUzN,GAAG2M,MAAO,KAC9B5B,KACJA,EAAMtF,GAAOgI,EAAUzN,GAAG0M,OAAOrI,GACjCoJ,EAAUzN,GAAG2M,MAAMlH,GAAKjC,SAASuH,QA/BNF,GC5KhB6C,EAInB9O,eAEM0O,EAAQ9L,SAASmM,cAAc,kBAC1BC,KAAK3C,YAAYqC,KAGpBrC,YAAYzJ,SAASqM,eAAe,UACrCP,MAAQA,MAGTQ,EAAQR,EAAMQ,WACbA,MAAQA,OAGRC,MAAQD,EAAMC,OAASD,EAAME,cAG7BC,sFASPC,YAAAA,iBAAQC,EAAUC,EAAUjJ,OACtB2I,EAAQtN,KAAKsN,MACbC,EAAQD,EAAMC,OAASD,EAAME,SAC7BC,EAAMzN,KAAKyN,SAEJG,EAAS1G,QAAQ,WAAY,SAAS2G,SACxC,IAAMA,EAAG3D,gBAEbuD,EAAI3F,eAAe6F,KAmBlBA,GAAUG,YAAYF,EAAUjJ,OAnBH,KAE7BoJ,EAAQR,EAAM9N,OAEduO,EAAcJ,EAAW,KAAOjJ,QAI5BsJ,WAAWN,EAAW,KAAOK,EAAc,KAAMD,GACvD,MAAM7N,KACAgO,QAAQP,EAAUK,EAAaD,aAG7BT,EAAMC,OAASD,EAAME,WAEzBG,GAAYJ,EAAMQ,GAAOjB,WAQ/BqB,8BACMnO,KAAKsN,MAAMc,YAGjBD,qBAAQxJ,QACL2I,MAAMc,UAAYzJ,KAOrB0J,2BACEZ,EAAMzN,KAAKyN,IACXa,SACC,IAAIX,KAAYF,IACfjB,KAAKmB,EAASzG,QAAQ,OAAQ,OAAS,SAAWuG,EAAIE,GAAUU,QAAQnH,QAAQ,OAAQ,SAAW,cAElGoH,EAAI7C,KAAK,SAOd8C,uBACEd,EAAMzN,KAAKyN,IACXa,SACC,IAAIX,KAAYF,EAAK,KACpBe,EAAUf,EAAIE,KACdA,UACC,IAAInO,EAAI,EAAGA,EAAIgP,EAAQ/O,OAAQD,IAAK,KACnCoO,EAAWY,EAAQhP,KACnBmO,GAAUC,GAAYY,EAAQC,iBAAiBb,WAGhDU,0CC1FX,IAAqBI,EAMnBtQ,SAAYgB,EAAIqC,OPmBQnC,WOlBfmC,WAEFkN,gBACAC,cAAe,OACfC,oBAAqB,OACrBN,IAAM9M,EAAK8M,KAAO9M,EAAKqN,aAAUrK,EPahBnF,eOXAyP,OAAO3P,EAAIqC,IPa/BT,SAASgO,YAAc9P,EACzBI,IAGAH,EAAO6B,UAAW/B,GAA0B,SAASgQ,EAAY/O,GAC3Dc,SAASgO,YAAc9P,IACzBI,IACAK,EAASqB,UAAW/B,GAA0BgQ,cOXpDF,YAAAA,gBAAO3P,EAAIqC,gBAEH,iBAAmBrC,EAAM4B,SAASkO,cAAc9P,GAAMA,MAGxD2J,EAAQtH,EAAKsH,OAAS1E,SAASjF,EAAG2J,QAAU,IAC5CC,EAASvH,EAAKuH,QAAU3E,SAASjF,EAAG4J,SAAW,IAE/CmG,EAAU1N,EAAK0N,QAAU,GAAK,IAChB1N,EAAK+G,aAAe,IACnB/G,EAAK2N,cAAgB,IACrB3N,EAAK4N,cAAgB,KACrB5N,EAAK6N,cAA+B,EAAfF,EAA6B,EAAVD,EAA4B,EAAd3G,IACzDpH,KAAKwC,IAAIoF,EAASsG,EAAeD,EAActG,KAC7CwG,EAAY,EAAI/G,KAChBO,EAAQwG,GAAa,EACnC5M,KACCyM,GAEDI,KACChH,QACI/G,EAAKgO,aAAe,aAIxBrQ,GAAKA,OACLf,IAAM,IAAIA,EAAIe,EAAI2J,EAAOC,EAAQvH,EAAKoL,cACtC6C,IACH,IAAIlO,EAAMxB,SACJ2P,EAAaJ,EAAY,KACzBA,EAAY,IACbK,OACGA,GAAeR,EAAeD,UAC5BxM,SACA6M,iBAC0B/K,GAAvBhD,EAAKoO,gBAAqCpO,EAAKoO,6BAC3CpO,EAAKa,gBAEtB,IAAIiG,EAAOvI,iBACG,MACT2P,EAAanH,IACb+G,EAAYF,IACZE,EAA0B,EAAd/G,IACZ8G,EAA6B,EAAd9G,IACf8G,EAAe,EAAI9G,SACd7F,SACA6M,UAIPtC,WAAa,IAAI4C,OAEjBhP,MAAQ,IAAIoI,OAEZpI,MAAMoE,UAAYlF,KAAK+P,QAAQC,KAAKhQ,WACpCc,MAAMsE,IAAI3D,EAAKX,OAASW,EAAKwO,cAAgB,aAI7CC,GAAG,+BAAwBrM,KAAexF,IAAI2O,WAAWnJ,UAGzD3C,KAAK,QAASlB,OAUrB+P,YAAAA,iBAAQjP,EAAO+B,WACT6C,EAAM5E,EAAMiH,UACZwG,EAAMvO,KAAKuO,IAEN/O,EAAI,EAAGA,EAAIQ,KAAK0P,GAAGjQ,OAAQD,SAC7BkQ,GAAGlQ,GAAGoD,OAAO9B,EAAO+B,OAGtB,IAAI8K,KAAYY,EAAK,KACpB4B,EAAa5B,EAAIZ,OAChB,IAAIyC,KAAQD,OACVjD,WAAWQ,QAAQC,EAAUyC,EAAM1K,GAIvC1F,KAAK6O,0BAEHA,oBAAqB,OACrB3N,KAAK,eAAgBJ,EAAO+B,QAC5BgM,oBAAqB,IAS9BqB,YAAAA,YAAGG,EAAW/Q,OACRgR,EAAStQ,KAAK2O,SACjB2B,EAAOD,KAAeC,EAAOD,QAAkB7D,KAAKlN,IAQvDiR,YAAAA,aAAIF,EAAW/Q,OACTD,EAAYW,KAAK2O,QAAQ0B,GACzBhR,GAAWA,EAAUmR,OAAOnR,EAAUoR,QAAQnR,GAAW,IAQ/D4B,YAAAA,cAAKmP,yEACCC,EAAStQ,KAAK2O,WACE2B,EAAOD,QAAkBK,OAAQJ,EAAO,UACnD9Q,EAAI,EAAGA,EAAImR,EAAalR,OAAQD,MAC1BA,GAAGsM,MAAM,KAAMJ,KCrJhCkF,MAAO9P,EACP+P,YAAanC,EACboC,WAAY5D,EACZ6D,QAASC"}